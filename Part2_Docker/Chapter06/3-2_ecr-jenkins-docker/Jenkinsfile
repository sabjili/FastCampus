def mainDir="Part2_Docker/Chapter06/3-2_ecr-jenkins-docker"
def region="ap-northeast-2"
def ecrUrl="663733199366.dkr.ecr.ap-northeast-2.amazonaws.com"
def repository="test"
def deployHost="172.31.20.69"

pipeline {
    agent any

    stages {
        stage('Pull Codes from Github'){
            steps{
                checkout scm
            }
        }
        stage('Build Codes by Gradle') {
            steps {
                sh """
                cd ${mainDir}
                ./gradlew clean build
                """
            }
        }
        stage('Build Docker Image by Jib & Push to AWS ECR Repository') {
            steps {
                withAWS(region:"${region}", credentials:"aws-key") {
                    ecrLogin()
                    sh """
                        cd ${mainDir}
                        ./gradlew jib -Djib.to.image=${ecrUrl}/${repository}:${currentBuild.number} -Djib.console='plain'
                    """
                }
            }
        }
        stage('Check AWS ECR Repository'){
            steps{
                withAWS(region:"${region}", credentials:"aws-key") {
                    sh """
                        aws --version
                        aws configure list
                        env | grep AWS
                    """

                    script {
                        def scanSuccess = false
                        def maxRetries = 10
                        def delayBetweenRetries = 30 // 30초 딜레이

                        for (int i = 0; i < maxRetries; i++) {

                            // AWS CLI를 통해 ECR 이미지 스캔 결과 조회
                            def command = """
                                aws ecr describe-image-scan-findings --repository-name ${repository} --image-id imageTag=${currentBuild.number} --region ${region} --output json
                            """

                            def status = sh(script: command, returnStatus: true)
                            if (status == 0) {
                                // 명령이 성공적으로 실행된 경우
                                def scanFindings = sh(script: command, returnStdout: true).trim()
                                def scanData = readJSON text: scanFindings
                                def findingsCount = scanData.imageScanFindings.findings.size()
                                echo "Number of findings: ${findingsCount}"

                                if (findingsCount > 0) {
                                    error("Image scan found vulnerabilities. Failing the build.")
                                } else {
                                    echo "No vulnerabilities found in image."
                                }

                                scanSuccess = true
                                break
                            } else {
                                echo "Scan not found. Retrying in ${delayBetweenRetries} seconds..."
                                sleep(time: delayBetweenRetries, unit: 'SECONDS')
                            }

                        }

                        if (!scanSuccess) {
                            error("Failed to get scan results after ${maxRetries} attempts.")
                        }
                    }
                }
            }
        }

        stage('Deploy to AWS EC2 VM'){
            steps{
                sshagent(credentials : ["deploy-key"]) {
                    sh "ssh -o StrictHostKeyChecking=no ubuntu@${deployHost} \
                     'aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecrUrl}/${repository}; \
                      docker stop $(docker ps -q); \
                      docker rm $(docker ps -a -q); \
                      docker pull ${ecrUrl}/${repository}; \
                      docker run -d --name test -p 80:8080 ${ecrUrl}/${repository}:${currentBuild.number};'"
                }
            }
        }
    }
}